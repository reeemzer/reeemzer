
/**
 * 
 *
 * @author Reem Zer
 * @name: "NSO group" test and more
 */
import java.util.*;
class Solution {
    
    //******************************* Q1 - find the smallest number thet his digit sum is *2 then N ********************************
    public int digitSum(int N) { 
        int sum = 0;
        while (N != 0) {
            int dig = N % 10;
            sum += dig;
            N = N / 10;
        }
        return sum;
    }
    public int solution(int N) {
        int targetDigitSum = 2 * digitSum(N);
        int candidate = N;
        while (digitSum(candidate) != targetDigitSum) {
            candidate += 1;
        }
        return candidate;
    }
//***************************Q2 - version 1  ***************************************************************************************

public String q1(int N){
    
    String res = "";
    String aRes = "+--";
    int aN = N / 3;
    int bN  = N % 3;
    
    for (int i = 0; i < aN; i++){
        res += aRes;
    }
    
    if (bN == 1){
        res += "+";
    }else if(bN == 2){
        res += "+-";
    }
    return res;  
}

//***************************Q2 - version 2  **************************************************************************************** 
public String q12(int N){

    String  res = "";
    for (int i = 0; i < N; i++){
    
        if (i % 3 == 0){
            res += "+";
            }else{
            res += "-";
        }
    }
    return res;
}

//*************************** Q3- return how many taims the word BALLOON find in n string - version 1  ********************************
public int q3balloon(String n){
    int [] hist = new int[5];
    
    for (int i = 0; i < n.length(); i++){
        if( n.charAt(i) == 'B'){
        hist[0]++;
        
        }else if( n.charAt(i) == 'A'){
        hist[1]++;
            
        }else if( n.charAt(i) == 'L'){
        hist[2]++;
            
        }else if( n.charAt(i) == 'O'){
        hist[3]++;
        
        }else if( n.charAt(i) == 'N'){
        hist[4]++;
        }
    }
    return Math.min( Math.min( Math.min( hist[0], hist[1]), Math.min( hist[2] / 2, hist[3]) / 2),hist[4]);
}
//*************************** Q3- return how many taims the word BALLOON find in n string - version 2  ********************************
public int ballon(String n){
    
    int hist [] = new int [26];
    for (int i = 0; i < n.length(); i++){
        hist [n.charAt(i) - 'A']++;
    }
    int a = hist[0];
    int b = hist[1];
    int l = hist[12];
    int o = hist[14];
    int m = hist[15];
    return Math.min(Math.min(Math.min(a,b), Math.min (l / 2 , o / 2)), m);
}

//*************************** is the word n polindrom?  **********************************************************************************
    public static boolean isStringPolindrom (String N){
        int backPoint = 0;
        int frontPoint = N.length() - 1;
        while (backPoint < frontPoint){
            if(N.charAt(backPoint) != N.charAt(frontPoint)){
                return false;
                }else{
                backPoint++;
                frontPoint--;                
            }
        }
        return true;
    }
    public static boolean isNumPolindrom (int N){
        int reverse = 0;
        int temp = N;
        int digit = 0;
        while (N != 0){
            digit = N % 10;
            reverse = (reverse * 10) + digit;
            N /= 10;
        }
        if(temp == reverse){
            return true;
        }else{
            return false;
        }
        }

//************************** *Write a function that receives input from a sorted array and number****************************************************
// ********************The function does a binary search in the array, and returns the cell in the array that is closest to the number ***************
private static int theCloset (int[] arr, int num){

int i = 0;
int j = arr.length - 1;
int mid = 1;

while (i <= j || mid == i || mid == j){
    mid = (j + i) / 2;
    
    if(num > arr[mid]){
    i = mid + 1 ;
    }
    
    if( num < arr[mid]){
    j = mid - 1;
    }
    
    if (num == arr[mid]){
        return arr[mid];
    }
}
return arr[mid];
}

//*********************************** find tne N number in fibonacci **********************************************************
public static int fibonacci (int n){
   if ( n <= 1)
   return n;
   return fibonacci(n-1) + fibonacci(n - 2);
    } 
    
 //*********************************** eviler project- Q1 *********************************************************************   
public static int eviler (){

int res = 0;
for (int i = 0; i < 1000; i++){
    if ((i % 3 == 0) || (i % 5 == 0))
    res += i;
}
return res;
}
}
